// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`--- test SearchBarComponent --- should be equal to the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchBarComponent
    history={Object {}}
    location={
      Object {
        "search": "",
      }
    }
    onSearch={[Function]}
    roles={
      Object {
        "merchant": Object {
          "name": "Мерчант",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <WithStyles(Grid)
        container={true}
        spacing={24}
      >
        <WithStyles(Grid)
          item={true}
          lg={9}
          md={7}
          sm={12}
        >
          <WithStyles(Grid)
            className="grid-control"
            container={true}
            spacing={24}
          >
            <WithStyles(Grid)
              item={true}
              lg={6}
              md={6}
            >
              <WithStyles(FormControl)
                className="field-control"
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="adornment-password"
                >
                  UID
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        aria-label="Стереть"
                        onClick={[Function]}
                      >
                        <pure(CloseIcon) />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  id="idInput"
                  onChange={[Function]}
                  value=""
                />
              </WithStyles(FormControl)>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              lg={6}
              md={6}
            >
              <WithStyles(FormControl)
                className="field-control"
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="adornment-password"
                >
                  Имя
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        aria-label="Стереть"
                        onClick={[Function]}
                      >
                        <pure(CloseIcon) />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  id="nameInput"
                  onChange={[Function]}
                  value=""
                />
              </WithStyles(FormControl)>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              lg={4}
              md={6}
            >
              <WithStyles(FormControl)
                className="field-control"
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="adornment-password"
                >
                  Email
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        aria-label="Стереть"
                        onClick={[Function]}
                      >
                        <pure(CloseIcon) />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  id="emailInput"
                  onChange={[Function]}
                  value=""
                />
              </WithStyles(FormControl)>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              lg={4}
              md={6}
            >
              <WithStyles(FormControl)
                fullWidth={true}
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="phone"
                >
                  Телефон
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  endAdornment={
                    <WithStyles(InputAdornment)
                      position="end"
                    >
                      <WithStyles(IconButton)
                        aria-label="Стереть"
                        onClick={[Function]}
                      >
                        <pure(CloseIcon) />
                      </WithStyles(IconButton)>
                    </WithStyles(InputAdornment)>
                  }
                  id="phoneInput"
                  onChange={[Function]}
                  value=""
                />
              </WithStyles(FormControl)>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              lg={4}
              md={6}
              sm={6}
            >
              <WithStyles(FormControl)
                fullWidth={true}
              >
                <WithStyles(WithFormControlContext(InputLabel))>
                  Роль
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(WithFormControlContext(Select))
                  id="roleInput"
                  onChange={[Function]}
                  value=""
                >
                  <WithStyles(MenuItem)
                    value=""
                  >
                    ---
                  </WithStyles(MenuItem)>
                  <WithStyles(MenuItem)
                    value="merchant"
                  >
                    Мерчант
                  </WithStyles(MenuItem)>
                </WithStyles(WithFormControlContext(Select))>
              </WithStyles(FormControl)>
            </WithStyles(Grid)>
          </WithStyles(Grid)>
        </WithStyles(Grid)>
        <WithStyles(Grid)
          item={true}
          lg={3}
          md={5}
          sm={12}
        >
          <WithStyles(Grid)
            item={true}
            md={12}
          >
            <Link
              className="search-bar_create-user-btn"
              replace={false}
              to="/create-user?backUrl=/users"
            >
              <WithStyles(Button)
                color="primary"
                variant="contained"
              >
                <pure(AddIcon) />
                 Создать пользователя
              </WithStyles(Button)>
            </Link>
          </WithStyles(Grid)>
        </WithStyles(Grid)>
      </WithStyles(Grid)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)
            item={true}
            lg={9}
            md={7}
            sm={12}
          >
            <WithStyles(Grid)
              className="grid-control"
              container={true}
              spacing={24}
            >
              <WithStyles(Grid)
                item={true}
                lg={6}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    UID
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="idInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={6}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    Имя
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="nameInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    Email
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="emailInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
              >
                <WithStyles(FormControl)
                  fullWidth={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="phone"
                  >
                    Телефон
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="phoneInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
                sm={6}
              >
                <WithStyles(FormControl)
                  fullWidth={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))>
                    Роль
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(WithFormControlContext(Select))
                    id="roleInput"
                    onChange={[Function]}
                    value=""
                  >
                    <WithStyles(MenuItem)
                      value=""
                    >
                      ---
                    </WithStyles(MenuItem)>
                    <WithStyles(MenuItem)
                      value="merchant"
                    >
                      Мерчант
                    </WithStyles(MenuItem)>
                  </WithStyles(WithFormControlContext(Select))>
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
            </WithStyles(Grid)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            lg={3}
            md={5}
            sm={12}
          >
            <WithStyles(Grid)
              item={true}
              md={12}
            >
              <Link
                className="search-bar_create-user-btn"
                replace={false}
                to="/create-user?backUrl=/users"
              >
                <WithStyles(Button)
                  color="primary"
                  variant="contained"
                >
                  <pure(AddIcon) />
                   Создать пользователя
                </WithStyles(Button)>
              </Link>
            </WithStyles(Grid)>
          </WithStyles(Grid)>,
        ],
        "container": true,
        "spacing": 24,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Grid)
              className="grid-control"
              container={true}
              spacing={24}
            >
              <WithStyles(Grid)
                item={true}
                lg={6}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    UID
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="idInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={6}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    Имя
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="nameInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    Email
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="emailInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
              >
                <WithStyles(FormControl)
                  fullWidth={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="phone"
                  >
                    Телефон
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="phoneInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
                sm={6}
              >
                <WithStyles(FormControl)
                  fullWidth={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))>
                    Роль
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(WithFormControlContext(Select))
                    id="roleInput"
                    onChange={[Function]}
                    value=""
                  >
                    <WithStyles(MenuItem)
                      value=""
                    >
                      ---
                    </WithStyles(MenuItem)>
                    <WithStyles(MenuItem)
                      value="merchant"
                    >
                      Мерчант
                    </WithStyles(MenuItem)>
                  </WithStyles(WithFormControlContext(Select))>
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
            </WithStyles(Grid)>,
            "item": true,
            "lg": 9,
            "md": 7,
            "sm": 12,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Grid)
                  item={true}
                  lg={6}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      UID
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="idInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                  lg={6}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Имя
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="nameInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Email
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="emailInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                >
                  <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="phone"
                    >
                      Телефон
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="phoneInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                  sm={6}
                >
                  <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))>
                      Роль
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(WithFormControlContext(Select))
                      id="roleInput"
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(MenuItem)
                        value=""
                      >
                        ---
                      </WithStyles(MenuItem)>
                      <WithStyles(MenuItem)
                        value="merchant"
                      >
                        Мерчант
                      </WithStyles(MenuItem)>
                    </WithStyles(WithFormControlContext(Select))>
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>,
              ],
              "className": "grid-control",
              "container": true,
              "spacing": 24,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      UID
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="idInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>,
                  "item": true,
                  "lg": 6,
                  "md": 6,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        UID
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="idInput"
                        onChange={[Function]}
                        value=""
                      />,
                    ],
                    "className": "field-control",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "UID",
                        "htmlFor": "adornment-password",
                      },
                      "ref": null,
                      "rendered": "UID",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>,
                        "id": "idInput",
                        "onChange": [Function],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Имя
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="nameInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>,
                  "item": true,
                  "lg": 6,
                  "md": 6,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        Имя
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="nameInput"
                        onChange={[Function]}
                        value=""
                      />,
                    ],
                    "className": "field-control",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Имя",
                        "htmlFor": "adornment-password",
                      },
                      "ref": null,
                      "rendered": "Имя",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>,
                        "id": "nameInput",
                        "onChange": [Function],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Email
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="emailInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>,
                  "item": true,
                  "lg": 4,
                  "md": 6,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        Email
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="emailInput"
                        onChange={[Function]}
                        value=""
                      />,
                    ],
                    "className": "field-control",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Email",
                        "htmlFor": "adornment-password",
                      },
                      "ref": null,
                      "rendered": "Email",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>,
                        "id": "emailInput",
                        "onChange": [Function],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="phone"
                    >
                      Телефон
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="phoneInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>,
                  "item": true,
                  "lg": 4,
                  "md": 6,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="phone"
                      >
                        Телефон
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="phoneInput"
                        onChange={[Function]}
                        value=""
                      />,
                    ],
                    "fullWidth": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Телефон",
                        "htmlFor": "phone",
                      },
                      "ref": null,
                      "rendered": "Телефон",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>,
                        "id": "phoneInput",
                        "onChange": [Function],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))>
                      Роль
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(WithFormControlContext(Select))
                      id="roleInput"
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(MenuItem)
                        value=""
                      >
                        ---
                      </WithStyles(MenuItem)>
                      <WithStyles(MenuItem)
                        value="merchant"
                      >
                        Мерчант
                      </WithStyles(MenuItem)>
                    </WithStyles(WithFormControlContext(Select))>
                  </WithStyles(FormControl)>,
                  "item": true,
                  "lg": 4,
                  "md": 6,
                  "sm": 6,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))>
                        Роль
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(WithFormControlContext(Select))
                        id="roleInput"
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(MenuItem)
                          value=""
                        >
                          ---
                        </WithStyles(MenuItem)>
                        <WithStyles(MenuItem)
                          value="merchant"
                        >
                          Мерчант
                        </WithStyles(MenuItem)>
                      </WithStyles(WithFormControlContext(Select))>,
                    ],
                    "fullWidth": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Роль",
                      },
                      "ref": null,
                      "rendered": "Роль",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": Array [
                          <WithStyles(MenuItem)
                            value=""
                          >
                            ---
                          </WithStyles(MenuItem)>,
                          Array [
                            <WithStyles(MenuItem)
                              value="merchant"
                            >
                              Мерчант
                            </WithStyles(MenuItem)>,
                          ],
                        ],
                        "id": "roleInput",
                        "onChange": [Function],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "children": "---",
                            "value": "",
                          },
                          "ref": null,
                          "rendered": "---",
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": "merchant",
                          "nodeType": "class",
                          "props": Object {
                            "children": "Мерчант",
                            "value": "merchant",
                          },
                          "ref": null,
                          "rendered": "Мерчант",
                          "type": [Function],
                        },
                      ],
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Grid)
              item={true}
              md={12}
            >
              <Link
                className="search-bar_create-user-btn"
                replace={false}
                to="/create-user?backUrl=/users"
              >
                <WithStyles(Button)
                  color="primary"
                  variant="contained"
                >
                  <pure(AddIcon) />
                   Создать пользователя
                </WithStyles(Button)>
              </Link>
            </WithStyles(Grid)>,
            "item": true,
            "lg": 3,
            "md": 5,
            "sm": 12,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Link
                className="search-bar_create-user-btn"
                replace={false}
                to="/create-user?backUrl=/users"
              >
                <WithStyles(Button)
                  color="primary"
                  variant="contained"
                >
                  <pure(AddIcon) />
                   Создать пользователя
                </WithStyles(Button)>
              </Link>,
              "item": true,
              "md": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(Button)
                  color="primary"
                  variant="contained"
                >
                  <pure(AddIcon) />
                   Создать пользователя
                </WithStyles(Button)>,
                "className": "search-bar_create-user-btn",
                "replace": false,
                "to": "/create-user?backUrl=/users",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <pure(AddIcon) />,
                    " Создать пользователя",
                  ],
                  "color": "primary",
                  "variant": "contained",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  " Создать пользователя",
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <WithStyles(Grid)
          container={true}
          spacing={24}
        >
          <WithStyles(Grid)
            item={true}
            lg={9}
            md={7}
            sm={12}
          >
            <WithStyles(Grid)
              className="grid-control"
              container={true}
              spacing={24}
            >
              <WithStyles(Grid)
                item={true}
                lg={6}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    UID
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="idInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={6}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    Имя
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="nameInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
              >
                <WithStyles(FormControl)
                  className="field-control"
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="adornment-password"
                  >
                    Email
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="emailInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
              >
                <WithStyles(FormControl)
                  fullWidth={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="phone"
                  >
                    Телефон
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    endAdornment={
                      <WithStyles(InputAdornment)
                        position="end"
                      >
                        <WithStyles(IconButton)
                          aria-label="Стереть"
                          onClick={[Function]}
                        >
                          <pure(CloseIcon) />
                        </WithStyles(IconButton)>
                      </WithStyles(InputAdornment)>
                    }
                    id="phoneInput"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                lg={4}
                md={6}
                sm={6}
              >
                <WithStyles(FormControl)
                  fullWidth={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))>
                    Роль
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(WithFormControlContext(Select))
                    id="roleInput"
                    onChange={[Function]}
                    value=""
                  >
                    <WithStyles(MenuItem)
                      value=""
                    >
                      ---
                    </WithStyles(MenuItem)>
                    <WithStyles(MenuItem)
                      value="merchant"
                    >
                      Мерчант
                    </WithStyles(MenuItem)>
                  </WithStyles(WithFormControlContext(Select))>
                </WithStyles(FormControl)>
              </WithStyles(Grid)>
            </WithStyles(Grid)>
          </WithStyles(Grid)>
          <WithStyles(Grid)
            item={true}
            lg={3}
            md={5}
            sm={12}
          >
            <WithStyles(Grid)
              item={true}
              md={12}
            >
              <Link
                className="search-bar_create-user-btn"
                replace={false}
                to="/create-user?backUrl=/users"
              >
                <WithStyles(Button)
                  color="primary"
                  variant="contained"
                >
                  <pure(AddIcon) />
                   Создать пользователя
                </WithStyles(Button)>
              </Link>
            </WithStyles(Grid)>
          </WithStyles(Grid)>
        </WithStyles(Grid)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Grid)
              item={true}
              lg={9}
              md={7}
              sm={12}
            >
              <WithStyles(Grid)
                className="grid-control"
                container={true}
                spacing={24}
              >
                <WithStyles(Grid)
                  item={true}
                  lg={6}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      UID
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="idInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={6}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Имя
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="nameInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Email
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="emailInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                >
                  <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="phone"
                    >
                      Телефон
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="phoneInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                  sm={6}
                >
                  <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))>
                      Роль
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(WithFormControlContext(Select))
                      id="roleInput"
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(MenuItem)
                        value=""
                      >
                        ---
                      </WithStyles(MenuItem)>
                      <WithStyles(MenuItem)
                        value="merchant"
                      >
                        Мерчант
                      </WithStyles(MenuItem)>
                    </WithStyles(WithFormControlContext(Select))>
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
              </WithStyles(Grid)>
            </WithStyles(Grid)>,
            <WithStyles(Grid)
              item={true}
              lg={3}
              md={5}
              sm={12}
            >
              <WithStyles(Grid)
                item={true}
                md={12}
              >
                <Link
                  className="search-bar_create-user-btn"
                  replace={false}
                  to="/create-user?backUrl=/users"
                >
                  <WithStyles(Button)
                    color="primary"
                    variant="contained"
                  >
                    <pure(AddIcon) />
                     Создать пользователя
                  </WithStyles(Button)>
                </Link>
              </WithStyles(Grid)>
            </WithStyles(Grid)>,
          ],
          "container": true,
          "spacing": 24,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Grid)
                className="grid-control"
                container={true}
                spacing={24}
              >
                <WithStyles(Grid)
                  item={true}
                  lg={6}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      UID
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="idInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={6}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Имя
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="nameInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                >
                  <WithStyles(FormControl)
                    className="field-control"
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="adornment-password"
                    >
                      Email
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="emailInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                >
                  <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="phone"
                    >
                      Телефон
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      endAdornment={
                        <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(IconButton)
                            aria-label="Стереть"
                            onClick={[Function]}
                          >
                            <pure(CloseIcon) />
                          </WithStyles(IconButton)>
                        </WithStyles(InputAdornment)>
                      }
                      id="phoneInput"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  lg={4}
                  md={6}
                  sm={6}
                >
                  <WithStyles(FormControl)
                    fullWidth={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))>
                      Роль
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(WithFormControlContext(Select))
                      id="roleInput"
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(MenuItem)
                        value=""
                      >
                        ---
                      </WithStyles(MenuItem)>
                      <WithStyles(MenuItem)
                        value="merchant"
                      >
                        Мерчант
                      </WithStyles(MenuItem)>
                    </WithStyles(WithFormControlContext(Select))>
                  </WithStyles(FormControl)>
                </WithStyles(Grid)>
              </WithStyles(Grid)>,
              "item": true,
              "lg": 9,
              "md": 7,
              "sm": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(Grid)
                    item={true}
                    lg={6}
                    md={6}
                  >
                    <WithStyles(FormControl)
                      className="field-control"
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        UID
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="idInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>
                  </WithStyles(Grid)>,
                  <WithStyles(Grid)
                    item={true}
                    lg={6}
                    md={6}
                  >
                    <WithStyles(FormControl)
                      className="field-control"
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        Имя
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="nameInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>
                  </WithStyles(Grid)>,
                  <WithStyles(Grid)
                    item={true}
                    lg={4}
                    md={6}
                  >
                    <WithStyles(FormControl)
                      className="field-control"
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        Email
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="emailInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>
                  </WithStyles(Grid)>,
                  <WithStyles(Grid)
                    item={true}
                    lg={4}
                    md={6}
                  >
                    <WithStyles(FormControl)
                      fullWidth={true}
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="phone"
                      >
                        Телефон
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="phoneInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>
                  </WithStyles(Grid)>,
                  <WithStyles(Grid)
                    item={true}
                    lg={4}
                    md={6}
                    sm={6}
                  >
                    <WithStyles(FormControl)
                      fullWidth={true}
                    >
                      <WithStyles(WithFormControlContext(InputLabel))>
                        Роль
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(WithFormControlContext(Select))
                        id="roleInput"
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(MenuItem)
                          value=""
                        >
                          ---
                        </WithStyles(MenuItem)>
                        <WithStyles(MenuItem)
                          value="merchant"
                        >
                          Мерчант
                        </WithStyles(MenuItem)>
                      </WithStyles(WithFormControlContext(Select))>
                    </WithStyles(FormControl)>
                  </WithStyles(Grid)>,
                ],
                "className": "grid-control",
                "container": true,
                "spacing": 24,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(FormControl)
                      className="field-control"
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        UID
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="idInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>,
                    "item": true,
                    "lg": 6,
                    "md": 6,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))
                          htmlFor="adornment-password"
                        >
                          UID
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(Input)
                          endAdornment={
                            <WithStyles(InputAdornment)
                              position="end"
                            >
                              <WithStyles(IconButton)
                                aria-label="Стереть"
                                onClick={[Function]}
                              >
                                <pure(CloseIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(InputAdornment)>
                          }
                          id="idInput"
                          onChange={[Function]}
                          value=""
                        />,
                      ],
                      "className": "field-control",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "UID",
                          "htmlFor": "adornment-password",
                        },
                        "ref": null,
                        "rendered": "UID",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>,
                          "id": "idInput",
                          "onChange": [Function],
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(FormControl)
                      className="field-control"
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        Имя
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="nameInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>,
                    "item": true,
                    "lg": 6,
                    "md": 6,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))
                          htmlFor="adornment-password"
                        >
                          Имя
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(Input)
                          endAdornment={
                            <WithStyles(InputAdornment)
                              position="end"
                            >
                              <WithStyles(IconButton)
                                aria-label="Стереть"
                                onClick={[Function]}
                              >
                                <pure(CloseIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(InputAdornment)>
                          }
                          id="nameInput"
                          onChange={[Function]}
                          value=""
                        />,
                      ],
                      "className": "field-control",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Имя",
                          "htmlFor": "adornment-password",
                        },
                        "ref": null,
                        "rendered": "Имя",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>,
                          "id": "nameInput",
                          "onChange": [Function],
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(FormControl)
                      className="field-control"
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="adornment-password"
                      >
                        Email
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="emailInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>,
                    "item": true,
                    "lg": 4,
                    "md": 6,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))
                          htmlFor="adornment-password"
                        >
                          Email
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(Input)
                          endAdornment={
                            <WithStyles(InputAdornment)
                              position="end"
                            >
                              <WithStyles(IconButton)
                                aria-label="Стереть"
                                onClick={[Function]}
                              >
                                <pure(CloseIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(InputAdornment)>
                          }
                          id="emailInput"
                          onChange={[Function]}
                          value=""
                        />,
                      ],
                      "className": "field-control",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Email",
                          "htmlFor": "adornment-password",
                        },
                        "ref": null,
                        "rendered": "Email",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>,
                          "id": "emailInput",
                          "onChange": [Function],
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(FormControl)
                      fullWidth={true}
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="phone"
                      >
                        Телефон
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        endAdornment={
                          <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>
                        }
                        id="phoneInput"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>,
                    "item": true,
                    "lg": 4,
                    "md": 6,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))
                          htmlFor="phone"
                        >
                          Телефон
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(Input)
                          endAdornment={
                            <WithStyles(InputAdornment)
                              position="end"
                            >
                              <WithStyles(IconButton)
                                aria-label="Стереть"
                                onClick={[Function]}
                              >
                                <pure(CloseIcon) />
                              </WithStyles(IconButton)>
                            </WithStyles(InputAdornment)>
                          }
                          id="phoneInput"
                          onChange={[Function]}
                          value=""
                        />,
                      ],
                      "fullWidth": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Телефон",
                          "htmlFor": "phone",
                        },
                        "ref": null,
                        "rendered": "Телефон",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "endAdornment": <WithStyles(InputAdornment)
                            position="end"
                          >
                            <WithStyles(IconButton)
                              aria-label="Стереть"
                              onClick={[Function]}
                            >
                              <pure(CloseIcon) />
                            </WithStyles(IconButton)>
                          </WithStyles(InputAdornment)>,
                          "id": "phoneInput",
                          "onChange": [Function],
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(FormControl)
                      fullWidth={true}
                    >
                      <WithStyles(WithFormControlContext(InputLabel))>
                        Роль
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(WithFormControlContext(Select))
                        id="roleInput"
                        onChange={[Function]}
                        value=""
                      >
                        <WithStyles(MenuItem)
                          value=""
                        >
                          ---
                        </WithStyles(MenuItem)>
                        <WithStyles(MenuItem)
                          value="merchant"
                        >
                          Мерчант
                        </WithStyles(MenuItem)>
                      </WithStyles(WithFormControlContext(Select))>
                    </WithStyles(FormControl)>,
                    "item": true,
                    "lg": 4,
                    "md": 6,
                    "sm": 6,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))>
                          Роль
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(WithFormControlContext(Select))
                          id="roleInput"
                          onChange={[Function]}
                          value=""
                        >
                          <WithStyles(MenuItem)
                            value=""
                          >
                            ---
                          </WithStyles(MenuItem)>
                          <WithStyles(MenuItem)
                            value="merchant"
                          >
                            Мерчант
                          </WithStyles(MenuItem)>
                        </WithStyles(WithFormControlContext(Select))>,
                      ],
                      "fullWidth": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Роль",
                        },
                        "ref": null,
                        "rendered": "Роль",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": Array [
                            <WithStyles(MenuItem)
                              value=""
                            >
                              ---
                            </WithStyles(MenuItem)>,
                            Array [
                              <WithStyles(MenuItem)
                                value="merchant"
                              >
                                Мерчант
                              </WithStyles(MenuItem)>,
                            ],
                          ],
                          "id": "roleInput",
                          "onChange": [Function],
                          "value": "",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "children": "---",
                              "value": "",
                            },
                            "ref": null,
                            "rendered": "---",
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": "merchant",
                            "nodeType": "class",
                            "props": Object {
                              "children": "Мерчант",
                              "value": "merchant",
                            },
                            "ref": null,
                            "rendered": "Мерчант",
                            "type": [Function],
                          },
                        ],
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Grid)
                item={true}
                md={12}
              >
                <Link
                  className="search-bar_create-user-btn"
                  replace={false}
                  to="/create-user?backUrl=/users"
                >
                  <WithStyles(Button)
                    color="primary"
                    variant="contained"
                  >
                    <pure(AddIcon) />
                     Создать пользователя
                  </WithStyles(Button)>
                </Link>
              </WithStyles(Grid)>,
              "item": true,
              "lg": 3,
              "md": 5,
              "sm": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Link
                  className="search-bar_create-user-btn"
                  replace={false}
                  to="/create-user?backUrl=/users"
                >
                  <WithStyles(Button)
                    color="primary"
                    variant="contained"
                  >
                    <pure(AddIcon) />
                     Создать пользователя
                  </WithStyles(Button)>
                </Link>,
                "item": true,
                "md": 12,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(Button)
                    color="primary"
                    variant="contained"
                  >
                    <pure(AddIcon) />
                     Создать пользователя
                  </WithStyles(Button)>,
                  "className": "search-bar_create-user-btn",
                  "replace": false,
                  "to": "/create-user?backUrl=/users",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <pure(AddIcon) />,
                      " Создать пользователя",
                    ],
                    "color": "primary",
                    "variant": "contained",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    " Создать пользователя",
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
